# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

bind ^s split-window -v
bind ^v split-window -h

# hold shift for a subordinate window split
bind S split-window -v -p 30
bind V split-window -h -p 30

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind ^h select-pane -L
bind ^j select-pane -D
bind ^k select-pane -U
bind ^l select-pane -R

# swap panes by holding shift and doing vim up/down
bind J swap-pane -D
bind K swap-pane -U

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# session management
bind C new-session
bind L choose-session

# vi-style controls for copy mode
setw -g mode-keys vi

# Set the prefix to ^A, like screen
unbind C-b
set -g prefix ^A
bind a send-prefix

bind ^a last-window # toggle last window like screen

set -g update-environment "DISPLAY WINDOWID SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION"

# let us use utf-8 drawing characters to make tab-like window formats
setw -g utf8 on

# set a 256color $TERM variable so programs inside tmux know they can use 256 colors
set -g default-terminal screen-256color

source '/usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf'

# reload tmux config file with C-a r
bind r source ~/.tmux.conf

# Create a new window and prompt for name
bind N command-prompt "new-window -n '%%'"

# Rebind prefix to b
bind B set -g prefix ^b
bind A set -g prefix ^a

# As close to unlimited history as we can get
set -g history-limit 999999999

# Toggle mouse on with ^B m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^B M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'


# window navigation
# bind-key -n M-C-h prev
# bind-key -n M-C-l next
# bind-key -n M-h select-pane -L
# bind-key -n M-j select-pane -D
# bind-key -n M-k select-pane -U
# bind-key -n M-l select-pane -R

# Don't delay sending escape to vim - so we don't see a delay when getting out
# of insert mode.
set -sg escape-time 0

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# set us some terminal window titles, if you please
set -g set-titles on
set -g set-titles-string "#S"
